def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}
pipeline {
    agent {
        node {
            label '3rd-CIBUS'
            customWorkspace "workspace/pipeline-${env.BUILD_ID}"
        }
    }
    environment {
        API_PORT = sh(returnStdout: true, script: 'awk -v min=1025 -v max=9999 \'BEGIN{srand(); print int(min+rand()*(max-min+1))}\'').trim()
        HV = sh(returnStdout: true, script: """
                if [[ $release = *"hyperv"* ]] || [[ $release = *"hyper-v"* ]] || [[ $release = *"hyper"* ]]; then 
                    echo "1"
                elif [[ $release = *"esxi"* ]] || [[ $release = *"esx"* ]]; then
                    echo "2"
                else
                    echo "3"
                fi
                """).trim()
        FROM = credentials('email-3rd-qe-list')
        SMTP = credentials('smtp-server-address')
        TASK_URL_PREFIX = credentials('task-url-prefix')
    }
    stages {
        stage('Omni Server Provision') {
            environment {
                PUBLIC_KEY = credentials('3rd_id_rsa_pub')
                NFS_IP = credentials('nfs-ip')
                NFS_PATH = credentials('nfs-path')
            }
            steps {
                script {
                    currentBuild.displayName = "Omni-Server-Provision-${env.id}"
                }
                echo 'Running Omni Container...'
                sh """
                    sudo docker network inspect jenkins >/dev/null 2>&1 || sudo docker network create jenkins
                    sudo docker pull henrywangxf/jenkins:latest
                    sudo docker ps --quiet --all --filter 'name=omni-${API_PORT}' | sudo xargs --no-run-if-empty docker rm -f
                    sudo docker volume inspect nfs-${API_PORT} > /dev/null 2>&1 || \
                        sudo docker volume create --driver local \
                        --opt type=nfs --opt o=addr=${NFS_IP} --opt device=:${NFS_PATH} nfs-${API_PORT}
	                sudo docker run -d --name omni-${API_PORT} --restart=always \
                        -p ${API_PORT}:22 -v nfs-${API_PORT}:/kernels/nfs \
                        --network jenkins --security-opt label=disable \
                        -e AUTHORIZED_KEYS=\"${PUBLIC_KEY}\" \
                        henrywangxf/jenkins:latest
                """
                sh 'printenv'
                cleanWs()
            }
        }

        stage('Hyper-V 2016 Gen1 - Start VM') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }
            environment {
                DOMAIN = credentials('hyperv-domain-login')
                VSPHERE = credentials('fd83fe98-2754-4985-9276-12fbbf73d3bf')
                OMNI_IP = credentials('omni-server-ip')
                OMNI_USER = credentials('omni-scp-username')
                ENVVISIPADDR = credentials('vsphere-ip')
                ENVVISPROTOCOL = 'HTTPS'
                HOST_ID = '2019-196-101'
                ComposeVer = 'rhel-8.0.0'
                IMAGE = "image-${ComposeVer}-gen1.vhdx"
            }
            agent {
                node {
                    label '3rd-CIVAN'
                    customWorkspace "workspace/2016-g1-start-vm-${env.BUILD_ID}"
                }
            }
            when {
                expression { HV == '1' || HV == '3'}
            }
            steps {
                script {
                    currentBuild.displayName = "hv-gating-${env.ComposeVer}-${env.id}"
                }
                echo 'Gen1 VM Provision on 2016'
                powershell 'Get-ChildItem Env:'
                RunPowershellCommand(".\\runner.ps1 -action start")
            }
        }

        stage('Hyper-V 2016 Gen1 - Provision VM') {
            agent {
                node {
                    label '3rd-CIBUS'
                    customWorkspace "workspace/2016-g1-provision-vm-${env.BUILD_ID}"
                }
            }
            steps {
                script {
                    currentBuild.displayName = "VM-Provision-${env.id}"
                }
                echo 'Running Ansible Container...'
                sh 'printenv'
                sh """
                    sudo cp /root/hosts ProvisionVM/playbook/
                    sudo docker build -t ansible -f ProvisionVM/ansible.dockerfile .
                    sudo docker run --name ansible-test -d ansible ansible-playbook --version
                    CID=\$(docker ps | awk 'NR > 1 {print \$1; exit}')
                    sudo docker cp \$CID:/root/.ssh/id_rsa.pub /root/
                    sudo docker run --name test1 --rm -it ansible ansible-playbook test.yml --tags test -e \"url=http://test\" -v
                """
                cleanWs()
            }
        }

    }
    post {
        always {
            echo 'Stop and remove omni container'
            echo 'Start result analyzer and email sender container'
            echo 'Remove volume'
            sh """
                sudo docker ps --quiet --all --filter 'name=omni-${API_PORT}' | sudo xargs --no-run-if-empty docker rm -f
                sudo docker ps --quiet --all --filter 'name=ansible-test' | sudo xargs --no-run-if-empty docker rm -f
                #sudo docker run --rm --name mailbot-${API_PORT} \
                #        -v kernels-volume-func-${API_PORT}:/kernels --network jenkins \
                #        henrywangxf/jenkins:latest \
                #        python3 ./mailbot.py --path /kernels --mail ${FROM} --task ${TASK_URL_PREFIX} --smtp ${SMTP} --hv ${HV}
                sudo docker volume ls --quiet --filter 'name=nfs-${API_PORT}' | sudo xargs --no-run-if-empty docker volume rm
            """
            // sudo docker volume ls --quiet --filter 'name=kernels-volume-${API_PORT}' | sudo xargs --no-run-if-empty docker volume rm
            // sudo docker rmi -f henrywangxf/jenkins:latest
            cleanWs()
        }
    }
}
            