def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}
pipeline {
    agent {
        node {
            label '3rd-CIBUS'
            customWorkspace "workspace/pipeline-${env.BUILD_ID}"
        }
    }
    environment {
        API_PORT = sh(returnStdout: true, script: 'awk -v min=1025 -v max=9999 \'BEGIN{srand(); print int(min+rand()*(max-min+1))}\'').trim()
        FROM = credentials('email-3rd-qe-list')
        SMTP = credentials('smtp-server-address')
        TASK_URL_PREFIX = credentials('task-url-prefix')
    }
    stages {
        stage('Get info from CI Messages') {
            environment {
                CI_MESSAGES = '''{"info": {"weight": 0.2, "parent": null, "completion_time": "2019-03-12 07:16:06.852154", "request": ["git://pkgs.devel.redhat.com/rpms/hyperv-daemons#074b42ef499625b3d310ff0998ce434f87634042", "rhel-8.0.0-candidate", {"scratch": true}], "start_time": "2019-03-12 07:12:54.204516", "start_ts": 1552374774.20452, "state": 2, "awaited": null, "label": null, "priority": 20, "channel_id": 21, "waiting": false, "create_time": "2019-03-12 07:12:52.866539", "id": 20993672, "create_ts": 1552374772.86654, "owner": 4977, "host_id": 229, "completion_ts": 1552374966.85215, "arch": "noarch", "method": "build", "result": null}, "attribute": "state", "old": "OPEN", "new": "CLOSED"}'''
                BREW_API = credentials('3rd-brew-api-address')
            }
            steps {
                script {
                    currentBuild.displayName = "Get-Info-${env.id}"
                }
                sh "./ProvisionVM/build.sh '${CI_MESSAGES}' ${TASK_URL_PREFIX} ${BREW_API}"
                //sh 'printenv'
                stash includes: 'vars.properties', name: 'vars'
            }
        }
        stage('Omni Server Provision') {
            environment {
                PUBLIC_KEY = credentials('3rd_id_rsa_pub')
                NFS_IP = credentials('nfs-ip')
                NFS_PATH = credentials('nfs-path')
            }
            steps {
                script {
                    currentBuild.displayName = "Omni-Server-Provision-${env.id}"
                }
                unstash "vars"
                sh '''
                    #cat ./vars.properties
                    source ./vars.properties                    
                    echo "---------$NVR"
                '''
                //sh 'printenv'
                cleanWs()
            }
        }

        stage('Hyper-V 2016 Gen1 - Load Image') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }
            environment {
                DOMAIN = credentials('hyperv-domain-login')
                VSPHERE = credentials('fd83fe98-2754-4985-9276-12fbbf73d3bf')
                OMNI_IP = credentials('omni-server-ip')
                OMNI_USER = credentials('omni-scp-username')
                ENVVISIPADDR = credentials('vsphere-ip')
                ENVVISPROTOCOL = 'HTTPS'
                HOST_ID = '2019-196-101'
                ComposeVer = 'rhel-8.0.0'
                IMAGE = "image-${ComposeVer}-test.vhdx"
            }
            agent {
                node {
                    label '3rd-CIVAN'
                    customWorkspace "workspace/2016-g1-load-image-${env.BUILD_ID}"
                }
            }
            steps {
                script {
                    currentBuild.displayName = "hv-gating-${env.ComposeVer}-${env.id}"
                }
                unstash "vars"
                powershell '''
                    $NVR = (get-content vars.properties | where-object {$_ -like "NVR*"}).split("=")[1]
                    write-host "---------$NVR"
                '''
                cleanWs()
            }
        }


    }

}
            